{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","Fragment","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","AboutText","role","placeholder","onClick","toggleMode","htmlfor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","split","join","document","getElementById","select","navigator","clipboard","writeText","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","defaultProps","App","setAlert","message","setTimeout","_useState3","_useState4","setmode","body","background","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.96eb52ad.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\n// The \"props\" passed from \"App.js\" has to be accepted by \"Navbar()\" function \r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n      {/* In JSX  we replace \"class\" with \"className\" */}\r\n      {/* we use backtick (  `  ) for using templet literals here */}\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>    {/* Dark Mode */}\r\n      {/* <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">     {/*light mode     */}\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>                    {/* We can use props passed by \"App.js\" just    {props.props_name} */}\r\n                {/* here we are again replacing href=\"/\"  with href=\"#\"  because if we click that it will direct us to a page which we have commented and since the page is not found we will get  404 error  */}\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                {/*    In JSX  we replace     href=\"#\"    with    href=\"/\"       */}\r\n                {/* replace \"<a></a>\"  with \" <Link></Link>\" */}\r\n                {/* replace \"href\"  with  \"to\" */}\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                {/* here we are again replacing href=\"/\"  with href=\"#\"  because if we click that it will direct us to a page which we have commented and since the page is not found we will get  404 error  */}\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/about\">{props.AboutText}</a>                {/* We can use props passed by \"App.js\" just    {props.props_name} */}\r\n              </li>\r\n            </ul>\r\n            <form className=\"d-flex\" role=\"search\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              {/* <button className=\"btn btn-outline-success\" type=\"submit\">Search</button> */}\r\n              {/* In Bootstrap:-\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n              primary -----------> blue colour\r\n              outline-success -----------> green colour \r\n              danger -----------> red colour */}\r\n            </form>\r\n            {/* using ternary operator with the props passed */}\r\n            {/* when \"mode = light\" then display \"Enable Dark Mode\" in dark(black) color  , when \"mode = dark\" then display \"Enable Dark Mode\" in light(white) color   */}\r\n            {/* this will display the color of the text(content) */}\r\n            <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n            {/* when \"mode = light\" then display \"Enable Dark Mode\" in dark(black) color  , when \"mode = dark\" then display \"Enable Dark Mode\" in light(white) color   */}\r\n              <label className=\"form-check-label\" htmlfor=\"flexSwitchCheckDefault\">{`Enable ${props.mode === 'light'?'dark':'light'} Mode`}</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n    );\r\n}\r\n// \"Props\" = \" Properties\"\r\n// \"propTypes\" describes the type of \"props\" and if we use props of different types it give us an error \r\n// \"is.Required\" mark a \"props\" as compulsary \r\nNavbar.propTypes = {title: PropTypes.string.isRequired,\r\n                    AboutText:PropTypes.string\r\n}\r\n\r\n// This is how we set a default \"props\"\r\n// if we are not passing \"props\" to the this folder then we use this defaultProps \r\nNavbar.defaultProps = {\r\n  title: \"set title here\",\r\n  AboutText: \"About\"\r\n}","// write \" rfc  \" and the select emmet recommandation\r\n// Here \"{useState}\" is a Hook \r\nimport React,{useState} from 'react'\r\n// \"Hooks\" are used if we want to use features of class without actually constructing class \r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n  //(13)\r\n  const HadleCopy = () => {\r\n    // accessing text by using id_name \r\n    let text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    // using navigator interface and copping that to clipboard \r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Copied Text!\",\"success\")                  // \"showAlert\" is called\r\n\r\n  }\r\n\r\n  // (11)\r\n  const HadleExtraSpaces = () => {\r\n    // if one or more than one space is present then split the text and store that in form of ARRAY \r\n    let newText = text.split(/[ ]+/);       // use of regex\r\n    // Now join all the elements of array with a single space \r\n    setText(newText.join(\" \"))\r\n    props.showAlert(\"Extra spaces are removed\",\"success\")        // \"showAlert\" is called\r\n\r\n  }\r\n\r\n  // (5)\r\n  const HadleUpCase = () => {\r\n    // whenever this function is fired. In console it prints \" \"Uppercase was clicked\" + text \"\r\n    //console.log(\"Uppercase was clicked\" + text);\r\n\r\n    // \"newText\" will be updated with the     Upper Case of \"text\"\r\n    let newText = text.toUpperCase();\r\n    // whenever this function is fired. text will be reset with  \" \"newText\"  \"\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Upper Case\",\"success\")        // \"showAlert\" is called\r\n  }\r\n\r\n  // (9)\r\n  const HadleClear = () => {\r\n    // whenever this function is fired. In console it prints \" \"Uppercase was clicked\" + text \"\r\n    //console.log(\"Uppercase was clicked\" + text);\r\n\r\n    // \"newText\" will be updated with the     Upper Case of \"text\"\r\n    let newText = \"\";\r\n    // whenever this function is fired. text will be reset with  \" \"newText\"  \"\r\n    setText(newText);\r\n    props.showAlert(\"Text Cleared!\",\"success\")                // \"showAlert\" is called\r\n\r\n  }\r\n\r\n  //(7)\r\n  const HadleLowCase = () => {\r\n    // whenever this function is fired. In console it prints \" \"Lowercase was clicked\" + text \"\r\n    //console.log(\"Lowercase was clicked\" + text);\r\n\r\n    // \"newText\" will be updated with the     Upper Case of \"text\"\r\n    let newText = text.toLowerCase();\r\n    // whenever this function is fired. text will be reset with  \" \"newText\"  \"\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Lower Case\",\"success\")         // \"showAlert\" is called\r\n\r\n  }\r\n  \r\n  // (3)\r\n  const HandleOnChange = (event) => {            //  Here (event)     is a event object\r\n    // whenever this function is fired. In console it prints \" \"On Change\"  \"\r\n    //console.log(\"On Change\");\r\n\r\n    // whenever this function is fired. The \r\n    setText(event.target.value);                  // setText(\"new Text\");\r\n  }\r\n\r\n  // here \"text\" is assigned with the value of useState     ---- i.e \" Enter the text here \"\r\n  // \"setText\" is used when we have to update the value of \"text\"\r\n  // (1)\r\n  const [text, setText] = useState('');           // here \"text\" is a state,      \"useState\" is a Hook\r\n\r\n  //const [text, setText] = useState('Enter the text here');\r\n  // wrong way to change the state\r\n  // text = \"new text\";               \r\n  \r\n  // correct way to change the state \r\n  // setText(\"new Text\");\r\n  return (\r\n    <>\r\n    {/* if color of mode is \"dark\" then change of content (text) to \"white\" , else change to \"black\" */}\r\n    <div className=\"container\" style={{color : props.mode === 'dark'? 'white' : 'black'}}>\r\n        <h2>{props.heading}</h2>              {/* We can use props passed by \"App.js\" just    {props.props_name} */}\r\n        <div className=\"mb-3\" >\r\n    {/* if color of mode is \"dark\" then change of content (text) to \"white\" , else change to \"black\" */}\r\n    {/* if color of mode is \"dark\" then change of background to '#343a40' , else change to \"white\" */}\r\n            <textarea className=\"form-control\" value={text} onChange={HandleOnChange} style={{ color : props.mode === 'dark'?'white':'black', backgroundColor : props.mode ==='dark'?'#343a40':'white'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            {/* (2)    whenever we type anything in our textarea, \"value\" will be updated with {text} and \"onChange\" is an eventListener which fire our \"HandleOnChange\" function  */}\r\n        </div>\r\n        <button className=\"btn btn-primary mx-1\" onClick={HadleUpCase}>Convert to Uppercase</button>\r\n        {/*(4) \"onClick\" is an eventListener . so, when we click on \"Button\" it fire our \"HandleUpCase\" function  */}\r\n\r\n        <button className=\"btn btn-primary mx-1\" onClick={HadleLowCase}>Convert to Lowercase</button>\r\n        {/*(6) \"onClick\" is an eventListener . so, when we click on \"Button\" it fire our \"HadleLowCase\" function  */}\r\n\r\n        <button className=\"btn btn-primary mx-1\" onClick={HadleExtraSpaces}>Remove Extra Spaces</button>\r\n        {/*(10) \"onClick\" is an eventListener . so, when we click on \"Button\" it fire our \"HadleExtraSpaces\" function  */}\r\n\r\n        <button className=\"btn btn-primary mx-1\" onClick={HadleCopy}>Copy Text</button>\r\n        {/*(12) \"onClick\" is an eventListener . so, when we click on \"Button\" it fire our \"HadleCopy\" function  */}\r\n\r\n        <button className=\"btn btn-primary mx-1\" onClick={HadleClear}>Clear Text</button>\r\n        {/*(8) \"onClick\" is an eventListener . so, when we click on \"Button\" it fire our \"HadleClear\" function  */}\r\n\r\n    </div>\r\n    <div className=\"container my-2\" style={{color : props.mode === 'dark'? 'white' : 'black'}}>            {/* my-3   is a class of bootstrap which give spacing in Y-axis */}\r\n        <h2>Your text Summary</h2>\r\n        {/*(14)   {text.split(\" \").length} -------> this will give us count of no. of empty spaces,  {text.length} -------> no.of characters */}\r\n        <p>{text.split(\" \").length} Words and {text.length} Characters</p>\r\n        {/*(15)   (minutes for reading one words) * (Total no. of Words)  */}\r\n        <p>Reading Time {0.008 * text.split(\" \").length } Min</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0 ? text : \"Enter something in the textbox to preview it here\"}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    // this function will convert 1st letter of \"success\" to capital i.e \"Success\"\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        // convert 0th index of lower to upperCase (+) join with letters of lower from 1st index \r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    // since in start of program type is \"null\"\r\n    // if \"props.alert\" is null then remaining won't executed\r\n    // if \"props .alert\" is not null then execution of remaining code is executed\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n      {/* ${props.alert.type}   used to display color of alert , i.e \"success\" in green color*/}\r\n        <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n        {/* captitalize(props.alert.type)  conevrt \"success\" to \"Success\"*/}\r\n  </div>\r\n  )\r\n}\r\n","\n// //import logo from './logo.svg';\n// import './App.css';                  // ---------> importing App.css file\n// let name = \"PARAM\";\n// function App() {\n//   return (\n//     <>                               {/*---------> when you are using more than one tag then in \"return()\" . enclose all the tags in between <>_______</>*/}\n//     <nav>\n//       <li>Home</li>\n//       <li>About</li>\n//       <li>Contact</li>\n//     </nav>\n//     <img src=\"\" alt=\"\" />\n//     <div classNameName=\"container\">\n//       <h1>Hello {name} </h1>            {/* -------> contentwritten in between \"{_____}\" act like javascript and are functional*/}\n//       <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Consequatur similique quos dolor repellendus odit, et qui quibusdam eveniet. Esse nobis consequuntur minima, accusantium at quidem voluptatum dolor nihil obcaecati? Aut repellendus blanditiis nulla eum?</p>\n//     </div>\n//     </>\n//   );\n// }\n\n// we are importing App.css\nimport './App.css';\n// we are importing \"About\" which is present in folder \"components\" \n// import About from './components/About';\n// we are importing \"Navbar\" which is present in folder \"components\" \nimport Navbar from \"./components/Navbar\";\n// we are importing \"TextForm\" which is present in folder \"components\" \nimport TextForm from \"./components/TextForm\";\n// we are importing \"Alert\" which is present in folder \"components\" \nimport Alert from './components/Alert';\n// importing useState from 'react'\nimport React,{useState} from 'react'\n\n// we brought this code from \"reactrouter.com\"\n// by using \"react router\" we can change the necessary content of page without completely loading the page  \n// importing \"BrowserRouter\",\"Switch\",\"Route\",\"Link\" from \"react - router -dom\" package\n\n// import {BrowserRouter as Router, Switch ,Route } from \"react-router-dom\";\n\n// \"react-router-dom\"----------> this is a package , which we need to install externally using command\n// \" npm install react-router-dom\"\n\n// JSX :  we use both javascript and HTML together\n// there is a slight difference between HTML and JSX \n// using bootstrap navbar\nfunction App() { \n\n  // we get alert after some action is performed, therefore initially \"alert\" is set to \"null\"  \n  const [alert,setAlert] = useState(null);\n  // showAlert function is called when we want to display \"alert\".\n  // here \"message\" mean what \"text\" to be displayed in \"alert\"\n  //  here \"type\" represent either \"success(green)\",\"danger(red)\",\"warning(yellow)\",\"alert(light blue)\",\"primary(sky blue)\",\"secondary(grey)\",\"light\",\"dark\" alert\n  const showAlert = (message, type) => {\n    setAlert({\n      msg : message,\n      type : type\n    })\n    // \"setTimeout\" function will display \"alert\" message for mentioned time (900  millisec)\n    setTimeout(() => {\n      setAlert(null);       //after (900 milli sec) alert wil be updated to null\n    }, 1500);\n  }\n\n  const [mode,setmode] = useState('light');  // whether to enable dark mode or not                                \n  const toggleMode = () => {\n    if(mode === 'light'){\n      setmode('dark');\n      // document.body.style.background = 'grey';\n      document.body.style.background = '#0d2740';\n      showAlert(\"Dark mode has been enabled\",\"success\")    //when toggleMode is executed it display respective alert according to mode\n      document.title = \"Textutils - Dark Mode\"\n      // this is how we change title of our webpage Dynamically, when \"dark mode\" is enabled title become \"Textutils - Dark Mode\" \n      \n      // we can automatically change title of our web page for every paticular interval of time\n      // this is give bad user experiance , USED TO DRAG ATTENTION OF USER\n      /*\n      setInterval(() => {\n        document.title = \"Textutils is Amazing\";\n      }, 2000);\n      setInterval(() => {\n        document.title = \"Install Textutils Now\";\n      }, 900);\n      */\n    }\n\n    else{\n      setmode('light');\n      document.body.style.background = 'white';\n      showAlert(\"Light mode has been enabled\",\"success\")\n      document.title = \"Textutils - Light Mode\"\n      // this is how we change title of our webpage Dynamically, when \"light mode\" is enabled title become \"Textutils - Light Mode\" \n    }\n  }\n\n  return (\n    <>\n      {/* <Router> */}\n        {/* we created a separate file \"Navbar\" to store \"JSX\" used for building Navbar   */}\n        {/* <Navbar title={3}  AboutText =\"About us\"/> */}\n        {/* <Navbar title=\"TextUtils\"/> */}\n        <Navbar title=\"TextUtils\" AboutText=\"About us\" mode = {mode} toggleMode = {toggleMode}/>\n        {/* here \"title\" and \"AboutText\" are \"props\" which are sending to \"Navbar.js\" floder */}\n\n        <Alert alert={alert}/>\n\n        {/* by adding \" TextForm \" in class called \"container\" we will center our textField */}\n        <div className=\"container my-3\">          {/* my-3   is a class which give spacing in Y-axis */}\n          {/* <Switch> */}\n            {/* it's always a good practice to to write \"exact path\" insted of only \"path\". because react does partial matchimg which may give wrong output  */}\n            {/* <Route exact path=\"/about\">\n              <About />\n            </Route> */}\n            {/* <Route exact path=\"/\"> */}\n              <TextForm heading = \"Enter The Text To Analyze Below\" mode = {mode} showAlert={showAlert}/>\n            {/* </Route> */}\n          {/* </Switch> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}